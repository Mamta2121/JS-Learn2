//ES6 -> arrow function

//In Global Scope 
-> In a programming environment, the global scope is the scope that contains, and is visible in, all other scopes.
->In JavaScript, the global scope is associated with a global object:
    ---->In browsers, the global object is window.
    ---->In Node.js, the global object is global.
console.log(this);


//In Method
-> Function declared as property of an object is called method
-> Inside a method -> "this" refers to the object that the method is attached to, thus allowing the same method to be reused on different objects.
/*  
const user = {
    username: " mamta",
    price: 999,

    welcomeMessage: function(){                                  
       //console.log( `${username} , welcome to website`)
       //console.log( `${user.username} , welcome to website`)
       console.log( `${this.username} , welcome to website`)
        console.log(this)
    }
}
user.welcomeMessage()

user.username = "sam"

user.welcomeMessage()

*/


//Inside Function
->this will be undefined â€” but only if the function is in strict mode.
->In non-strict mode, a special process called this substitution ensures that the value of this is always an object. This means:
  -----> If a function is called with this set to undefined or null, this gets substituted with globalThis->which is usually akin to the global object.
/*
function chai(){
    let username = "hitesh"
    console.log(this.undefined)  
    console.log(this)   
}

chai();
*/

//Inside Arrow Function
->In arrow functions, this retains the value of the enclosing lexical context's this.
->Arrow Functions Do Not Bind Their Own this:
  ---->Unlike regular functions, arrow functions do not have their own this.
  ---->Instead, the value of this inside an arrow function is inherited from its surrounding lexical scope at the time of definition (the enclosing function, block, or global scope).
/*
const obj = {
    name: "Mamta",
    regularFunc: function () {
        console.log(this.name); // "Mamta"
    },
    arrowFunc: () => {
        console.log(this.name); // `this` inherits from the outer scope 
    },
};

//Arrow Function inside a method
const obj2 = {
    name: "Mamta",
    greet: function () {
        const arrowFunc = () => {
            console.log(this.name); // "Mamta"
        };
        arrowFunc();
    },
};
*/

//declaring a arrow function

//   ()=>{}  //basic syntax

//basic way
/* 
const addTwo = (num1,num2) => 
{
    return num1 + num2
}

console.log(addTwo(3,4))
*/


/*
//implicit way => for one line statement


// #1
const addTwo = (num1, num2) => num1+num2
console.log(addTwo(1,2))


// #2
const addTwo2 =(num1,num2) => (num1+num2)

console.log(addTwo2(1,2))


//returning a object

//#1 way doesnot work here

const addTwo3 = (num1,num2) => {name:"mamta"}
console.log(addTwo3(1,2))

//#2 way does return a object

const addTwo4 = (num1, num2) => ({name:"mamta"})

console.log(addTwo4(1,2))

*/


const func1 = (x) => x*x;

const func2 = (x) => {
    return x*x
};

console.log(func1(5));
console.log(func2(5));

const func3 = () => ({name:"mamta"});
const func4 = ()=> {name:"mamta"};

console.log(func4())
console.log(func3())

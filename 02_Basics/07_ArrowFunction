//ES6 -> arrow function
/*
const user = {
    username: " mamta",
    price: 999,

    welcomeMessage: function(){
       // console.log( `${username} , welcome to website`)
       //console.log( `${user.username} , welcome to website`)
       console.log( `${this.username} , welcome to website`)
        console.log(this)
    }
}
user.welcomeMessage()

user.username = "sam"

user.welcomeMessage()

console.log(this)  //In node enviroment , it is empty object //in console this refers to the Gloabal object WINDOW
*/


/*
//this when used inside a function

function chai(){
    let username = "hitesh"
    console.log(this.undefined)  //inside a function, this work differnetly then inside a object
    console.log(this)   //this inside function returns a non-empty object
}

chai();


*/

//Arrow Fucntion -> this can be used inside arrow function
const chai = () => {
    let username = "hitesh"
    console.log(this)   //return a empty object
    console.log(this.username)
}

chai()


//decaling a arrow function

//   ()=>{}  //basic syntax

//basic way
/* 
const addTwo = (num1,num2) => 
{
    return num1 + num2
}

console.log(addTwo(3,4))
*/

//implicit way => for one line statement


// #1
const addTwo = (num1, num2) => num1+num2
console.log(addTwo(1,2))


// #2
const addTwo2 =(num1,num2) => (num1+num2)

console.log(addTwo2(1,2))


//returning a object

//#1 way doesnot work here

const addTwo3 = (num1,num2) => {name:"mamta"}
console.log(addTwo3(1,2))

//#2 way does return a object

const addTwo4 = (num1, num2) => ({name:"mamta"})

console.log(addTwo4(1,2))

